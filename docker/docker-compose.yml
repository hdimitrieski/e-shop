version: '3.9'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    networks:
      - eshopnet
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    networks:
      - eshopnet
    ports:
      - "9092:9092"
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    links:
      - zookeeper

  postgres:
    build: postgres
    networks:
      - eshopnet
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: dbpass
      POSTGRES_USER: dbuser
      PGTZ: Europe/Amsterdam
      CATALOG_DB_USER: catalogdbuser
      CATALOG_DB_PASSWORD: dbpass
      CATALOG_DB_NAME: catalogdb
      RATING_DB_USER: ratingdbuser
      RATING_DB_NAME: ratingdb
      RATING_DB_PASSWORD: dbpass
      ORDER_DB_USER: orderdbuser
      ORDER_DB_PASSWORD: dbpass
      ORDER_DB_NAME: orderdb
      KEYCLOAK_DB_USER: keycloak
      KEYCLOAK_DB_PASSWORD: dbpass
      KEYCLOAK_DB_NAME: keycloakdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dbuser" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2.4
    networks:
      - eshopnet
    ports:
      - "6379:6379"
    restart: on-failure
    environment:
      REDIS_PASSWORD: pass

  mongo:
    image: mongo:5.0.5
    networks:
      - eshopnet
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
    ports:
      - "27017:27017"
    restart: always

  authorization-service:
    image: "quay.io/keycloak/keycloak:18.0.2"
    networks:
      - eshopnet
    ports:
      - "8080:8080"
      - "8443:8443"
    restart: on-failure
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: dbpass
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloakdb
      KC_HOSTNAME_PATH: /auth
      KC_HTTP_ENABLED: "true"
      KC_HTTP_RELATIVE_PATH: /auth
      KC_HTTPS_KEY_STORE_PASSWORD: ${CONFIG_KEYSTORE_PASSWORD}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_FEATURES: admin2,token-exchange
      KC_HEALTH_ENABLED: "true"
    depends_on:
      - postgres
    volumes:
      - ./keycloak/auth-server.keystore:/opt/keycloak/conf/server.keystore
      - ./keycloak/eshop-realm.json:/opt/keycloak/data/import/eshop-realm.json
    healthcheck:
      test: ["CMD", "curl", "--fail", "--insecure", "https://authorization-service:8443/auth/health"]
    command: ["start-dev", "--import-realm"]

  portainer:
    image: portainer/portainer
    networks:
      - eshopnet
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer-data:/data
    ports:
      - "9000:9000"

networks:
  eshopnet:
    driver: bridge

volumes:
  mysql_data:
